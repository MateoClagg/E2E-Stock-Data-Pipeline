name: Release to CodeArtifact

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0

permissions:
  id-token: write  # Required for OIDC
  contents: write  # Required for creating GitHub releases
  attestations: write  # Required for SBOM attestation

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false  # Never cancel releases

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production  # Use GitHub environment for additional security
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332  # v4.1.7
      with:
        fetch-depth: 0  # Required for setuptools_scm

    - name: Set up Python
      uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f  # v5.1.1
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install release dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm[toml] awscli pip-audit cyclonedx-bom

    - name: üîí CRITICAL RELEASE GUARDRAILS
      id: guardrails
      run: |
        echo "üõ°Ô∏è Executing release safety checks..."
        
        # Get versions
        VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
        TAG_VERSION="${GITHUB_REF_NAME#v}"  # Strip 'v' prefix from tag
        
        echo "Package version: $VERSION"
        echo "Tag version: $TAG_VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
        
        # GUARDRAIL 1: Enforce tag ‚Üî version match
        if [ "$VERSION" != "$TAG_VERSION" ]; then
          echo "‚ùå GUARDRAIL FAILURE: Version mismatch!"
          echo "  Package version: $VERSION"
          echo "  Git tag version: $TAG_VERSION"
          echo "  These must match exactly for release safety."
          exit 1
        fi
        
        # GUARDRAIL 2: Ensure clean release (no dev/dirty suffixes)
        if [[ "$VERSION" =~ \.dev[0-9]+|\.dirty|[\+] ]]; then
          echo "‚ùå GUARDRAIL FAILURE: Refusing to release dev/dirty version: $VERSION"
          echo "  Only clean tagged versions can be released."
          exit 1
        fi
        
        # GUARDRAIL 3: Verify clean working tree
        if ! git diff --quiet || ! git diff --cached --quiet; then
          echo "‚ùå GUARDRAIL FAILURE: Working tree is dirty"
          echo "  Cannot release with uncommitted changes."
          git status --short
          exit 1
        fi
        
        echo "‚úÖ All release guardrails passed: $VERSION"

    - name: Build release package
      run: |
        python -m build  # Build both wheel and sdist
        
    - name: Verify build integrity
      run: |
        ls -la dist/
        twine check dist/*
        echo "‚úì Package integrity verified"

    - name: Generate release SBOM and security audit
      run: |
        # Generate SBOM (Software Bill of Materials) 
        cyclonedx-py -o sbom.json --format json
        cyclonedx-py -o sbom.xml --format xml
        
        # Run security audit on release packages
        echo "üîç Running security audit on release packages..."
        pip-audit --desc --output audit-report.json --format json dist/*.whl || {
          echo "‚ö†Ô∏è Security vulnerabilities found in dependencies"
          echo "üìÑ See audit-report.json for details"
          echo "üö® Consider delaying release until vulnerabilities are addressed"
        }
        
        echo "‚úì Release SBOM generated and security audit completed"

    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838  # v5.0.0
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: github-actions-release
        aws-region: ${{ secrets.AWS_REGION }}

    # TODO: Replace these placeholders with actual values:
    # - <domain>: Your CodeArtifact domain name
    # - <account_id>: Your AWS account ID  
    # - <repository>: Your CodeArtifact repository name
    # - <region>: Your AWS region (e.g., us-east-1)
    - name: Configure CodeArtifact authentication
      run: |
        aws codeartifact login --tool pip \
          --domain ${{ secrets.CODEARTIFACT_DOMAIN }} \
          --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} \
          --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} \
          --region ${{ secrets.AWS_REGION }}
        
        aws codeartifact login --tool twine \
          --domain ${{ secrets.CODEARTIFACT_DOMAIN }} \
          --domain-owner ${{ secrets.CODEARTIFACT_ACCOUNT_ID }} \
          --repository ${{ secrets.CODEARTIFACT_REPOSITORY }} \
          --region ${{ secrets.AWS_REGION }}

    - name: Publish to CodeArtifact
      run: |
        echo "Publishing ${{ steps.version.outputs.version }} to CodeArtifact..."
        twine upload --repository codeartifact dist/*
        echo "‚úì Successfully published to CodeArtifact"

    - name: Upload wheels to S3 for Databricks Unity Catalog
      if: vars.S3_WHEELS_BUCKET != ''
      run: |
        VERSION="${{ steps.guardrails.outputs.version }}"
        S3_PATH="s3://${{ vars.S3_WHEELS_BUCKET }}/wheels/stock-pipeline/${VERSION}/"
        
        # Safety check: Prevent overwriting existing releases
        if aws s3 ls "${S3_PATH}" --recursive | grep -q "\.whl"; then
          echo "üö® SAFETY CHECK: Release ${VERSION} already exists in S3"
          echo "   Path: ${S3_PATH}"
          echo "   Existing wheels found - refusing to overwrite."
          echo "   If this is intentional, manually delete the S3 path first."
          exit 1
        fi
        
        echo "üì¶ Uploading release wheels to S3..."
        aws s3 cp dist/ "${S3_PATH}" \
          --recursive --acl bucket-owner-full-control \
          --exclude "*" --include "*.whl"
        
        echo "‚úÖ Release wheels uploaded to ${S3_PATH}"

    - name: Print installation instructions
      run: |
        PACKAGE_NAME="stock-pipeline"
        VERSION="${{ steps.guardrails.outputs.version }}"
        DOMAIN="${{ secrets.CODEARTIFACT_DOMAIN }}"
        ACCOUNT_ID="${{ secrets.CODEARTIFACT_ACCOUNT_ID }}"
        REPOSITORY="${{ secrets.CODEARTIFACT_REPOSITORY }}"
        REGION="${{ secrets.AWS_REGION }}"
        
        echo ""
        echo "üéâ Release $VERSION published successfully!"
        echo ""
        echo "üì¶ Installation Instructions:"
        echo ""
        echo "1. From CodeArtifact (recommended):"
        echo "   %pip install ${PACKAGE_NAME}==${VERSION} --index-url https://${DOMAIN}-${ACCOUNT_ID}.d.codeartifact.${REGION}.amazonaws.com/pypi/${REPOSITORY}/simple/"
        echo ""
        
        if [ -n "${{ vars.S3_WHEELS_BUCKET }}" ]; then
          echo "2. From Unity Catalog Volume (if configured):"
          echo "   %pip install /Volumes/<catalog>/<schema>/<volume>/wheels/${PACKAGE_NAME}/${VERSION}/${PACKAGE_NAME}-${VERSION}-py3-none-any.whl"
          echo ""
        fi
        
        echo "3. For development (Databricks Repos):"
        echo "   %pip install -e ."
        echo ""

    - name: Create GitHub release with security artifacts
      uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191  # v2.0.8
      with:
        files: |
          dist/*
          sbom.json
          sbom.xml
          audit-report.json
        generate_release_notes: true
        body: |
          ## üöÄ Release ${{ steps.guardrails.outputs.version }}

          ### üì¶ Installation

          #### From CodeArtifact (Production)
          ```bash
          pip install stock-pipeline==${{ steps.guardrails.outputs.version }} --index-url https://${{ secrets.CODEARTIFACT_DOMAIN }}-${{ secrets.CODEARTIFACT_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/pypi/${{ secrets.CODEARTIFACT_REPOSITORY }}/simple/
          ```

          #### In Databricks
          ```python
          %pip install stock-pipeline==${{ steps.guardrails.outputs.version }} --index-url https://${{ secrets.CODEARTIFACT_DOMAIN }}-${{ secrets.CODEARTIFACT_ACCOUNT_ID }}.d.codeartifact.${{ secrets.AWS_REGION }}.amazonaws.com/pypi/${{ secrets.CODEARTIFACT_REPOSITORY }}/simple/
          ```

          ### üîí Security & Supply Chain

          - ‚úÖ **Release guardrails passed** (tag ‚Üî version, clean tree)
          - ‚úÖ **Tag ‚Üî Version verified** (${{ steps.guardrails.outputs.tag_version }} ‚Üî ${{ steps.guardrails.outputs.version }})
          - üìã **SBOM included** (CycloneDX format)  
          - üîç **Security audit completed** (pip-audit)
          - üè∑Ô∏è **Pure Python wheel** (py3-none-any)

          ### üìã Attachments
          - `sbom.json` - Software Bill of Materials (CycloneDX)
          - `audit-report.json` - Security vulnerability report

    - name: Notify on success
      if: success()
      uses: 8398a7/action-slack@28ba43ae48961b90635b50953d216767a6bea486  # v3.16.2
      with:
        status: success
        text: |
          üéâ **SUCCESS**: stock-pipeline v${{ steps.guardrails.outputs.version }} released
          üì¶ Available in CodeArtifact: `stock-pipeline==${{ steps.guardrails.outputs.version }}`
          üîí Security audit: PASSED
          üìã SBOM attached to GitHub release
          üîó Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.guardrails.outputs.version }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true

    - name: Notify on failure  
      if: failure()
      uses: 8398a7/action-slack@28ba43ae48961b90635b50953d216767a6bea486  # v3.16.2
      with:
        status: failure
        text: |
          üö® **CRITICAL FAILURE**: stock-pipeline v${{ steps.guardrails.outputs.tag_version }} release FAILED
          
          **Immediate Actions Required:**
          1. Check workflow logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          2. Verify no partial release occurred in CodeArtifact
          3. Investigate root cause before retry
          
          **Possible Issues:**
          ‚Ä¢ Version/tag mismatch (most common)
          ‚Ä¢ Dirty working tree on release
          ‚Ä¢ CodeArtifact authentication failure
          ‚Ä¢ Security audit failures
          
          @channel - Release engineer attention required
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true